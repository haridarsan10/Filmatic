<%- include("../partials/admin/admin-header") %>

<style>
/* General Styles */
body {
  overflow-x: hidden;
  padding-left: 300px;
  padding-top: 100px;
  padding-right: 50px;
}

/* Table */
.table {
  width: 100%;
  table-layout: fixed;
}

/* Card Styling */
.card {
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  background: #ffffff;
  margin-bottom: 20px;
}

.card-header {
  color: #343a40;
  background: #f8f9fa;
  padding: 10px;
  text-align: center;
  font-size: 18px;
  font-weight: bold;
  border-radius: 12px 12px 0 0;
}

/* Sidebar Styling */
.dashboard-menu {
  background-color: #ffffff;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  height: 350px;
  width: 290px;
  margin-left: 15px;
  flex: 0 0 290px;
}

.dashboard-menu .nav-link {
  font-weight: bold;
  color: #2c3e50;
  padding: 10px 15px;
  border-radius: 8px;
  transition: all 0.3s ease-in-out;
}

.dashboard-menu .nav-link:hover, 
.dashboard-menu .nav-link.active {
  background-color: #007bff;
  color: #ffffff;
  box-shadow: 0 4px 15px rgba(0, 123, 255, 0.4);
}

/* Layout */
.container {
  display: flex;
  justify-content: center;

}

.row {
  display: flex;
  align-items: flex-start;
  flex-wrap: nowrap;
  width: 100%;
}

/* Orders Sidebar */
.right {
  width: 100%;
  background: #ffffff;
  padding: 20px;
  border-radius: 12px;
  margin-top: 20px;
  margin-bottom: 50px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

/* Order Items */
.cart-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: #f8f9fa;
  padding: 15px;
  border-radius: 10px;
  margin-bottom: 15px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Order Image */
.cart-item img {
  width: 80px;
  height: 80px;
  border-radius: 8px;
  object-fit: cover;
}

/* Order Details */
.order-details {
  flex-grow: 1;
  padding-left: 15px;
}

.order-id {
  font-size: 14px;
  color: #333;
}

.cart-item-price {
  font-size: 16px;
  color: #d9534f;
  font-weight: bold;
}

/* Order Status */
.order-status {
  display: inline-block;
  padding: 5px 10px;
  border-radius: 6px;
  font-weight: bold;
  text-align: center;
}

.order-status.pending {
  background-color: orange;
}

.order-status.shipped {
  background-color: blue;
}

.order-status.delivered {
  background-color: green;
}

.order-status.cancelled {
  background-color: red;
}

/* View Order Button */
.view-order {
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background 0.3s ease-in-out;
}

.view-order:hover {
  background-color: #0056b3;
}

/* No Orders Message */
.no-orders {
  text-align: center;
  padding: 20px;
  font-size: 16px;
  color: #555;
}

/* Breadcrumb Navigation */
.breadcrumb-container {
  font-size: 14px;
}

.breadcrumb {
  list-style: none;
  display: flex;
  align-items: center;
  padding-left: 50px;
}

.breadcrumb li {
  display: flex;
  align-items: center;
}

.breadcrumb a {
  text-decoration: none;
  color: #007bff;
  font-weight: 500;
  transition: color 0.3s ease;
}

.breadcrumb a:hover {
  color: #0056b3;
}

.breadcrumb span {
  margin: 0 8px;
  color: #555;
}

/* Responsive Design */
@media (max-width: 768px) {
  .row {
    flex-direction: column;
  }

  .dashboard-menu {
    width: 35%; 
    height: 350px;
    margin-bottom: 20px;
  }

  .right {
    max-width: 100%;
  }

  .cart-item {
    flex-direction: column;
    align-items: flex-start;
  }

  .cart-item img {
    width: 100px;
  }

  .view-order {
    width: 100%;
    text-align: center;
  }

  .total-container {
  display: flex;
  justify-content: flex-end; 
  margin-top: 15px; 
  font-size: 18px;
  font-weight: bold;
}
}

.remove-item {
        background-color: #dc3545; /* Bootstrap danger color */
        color: white;
        border: none;
        padding: 6px 12px;
        font-size: 14px;
        border-radius: 5px;
        margin-left: auto;
        cursor: pointer;
        transition: background 0.3s ease-in-out;
        }

        .remove-item:hover {
            background-color: #c82333; /* Darker shade on hover */
        }


        .item-status-dropdown {
          background-color: #f8f9fa;
          border: 1px solid #ced4da;
          border-radius: 5px;
          transition: all 0.3s ease;
      }

      .item-status-dropdown:hover {
          background-color: #e9ecef;
          cursor: pointer;
      }


</style>
<main class="main">


  <!-- Order Items Section -->
  <section class="pt-10 pb-10">
    <div class="container">
      <div class="row">
        <div class="right">
          <div class="card-header">
              <h5 class="mb-0">Order Items</h5>
          </div>
          <% if (products && products.length > 0) { %>
            <% for (let i = 0; i < products.length; i++) { %>
                <div class="cart-item d-flex align-items-center justify-content-between p-3 border-bottom" id="order-item-<%= i %>">
                    
                    <!-- Product Image -->
                    <img src="/uploads/resized-images/<%= products[i].productImage[0] %>" 
                         alt="Product Image" class="cart-item-image" 
                         style="width: 120px; height: auto; border-radius: 5px;">
          
                    <!-- Product Details (Left) -->
                    <div class="d-flex flex-column" style="flex: 1; margin-left: 20px;">
                        <h6 style="font-weight: bold; margin: 0;"><%= products[i].productName %></h6>
                        <p class="cart-item-price mb-0 text-muted">Price: ₹<span><%= products[i].price %></span></p>
                        <p class="cart-item-quantity">Quantity: <%= products[i].quantity %></p>
                        <p class="cart-item-price"><strong>Total:</strong> ₹<%= products[i].total %></p>
                    </div>
        
                    <!-- Current Status (Center) -->
                    <div class="current-status text-center" style="flex: 0.5; font-weight: bold; color: black;">
                        <span class="badge bg-info text-dark" style="font-size: 14px; padding: 6px 12px; border-radius: 20px;">
                            <%= products[i].itemStatus %>
                        </span>
                    </div>
                    
                    <!-- Status Dropdown (Right) -->
                    <div class="d-flex flex-column align-items-end" style="flex: 0.5;">
                        <!-- <label for="itemStatusDropdown-<%= i %>" class="form-label" style="font-weight: 600;"></label> -->
                        <select class="item-status-dropdown form-select" 
                        data-order-id="<%= order.orderId %>" 
                        data-product-id="<%= products[i].productId %>" 
                        id="itemStatusDropdown-<%= i %>"
                        style="width: 150px; padding: 5px; font-size: 14px; border-radius: 5px; cursor: pointer;"
                        <%= ['ordered', 'shipped'].includes(products[i].itemStatus) ? '' : 'disabled' %>>
                        
                    <option value="ordered" <%= products[i].itemStatus === 'ordered' ? 'selected' : '' %>>Ordered</option>
                    <option value="shipped" <%= products[i].itemStatus === 'shipped' ? 'selected' : '' %>>Shipped</option>
                    <option value="delivered" <%= products[i].itemStatus === 'delivered' ? 'selected' : '' %>>Delivered</option>
                    <option value="cancelled" <%= products[i].itemStatus === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                    <option value="returned" <%= products[i].itemStatus === 'returned' ? 'selected' : '' %>>Returned</option>
                    <option value="returnRequested" <%= products[i].itemStatus === 'returnRequested' ? 'selected' : '' %>>Return Requested</option>
                    <option value="returnRejected" <%= products[i].itemStatus === 'returnRejected' ? 'selected' : '' %>>Return Rejected</option>
                </select>
                
                    </div>
        
                </div>
            <% } %>
        <% } else { %>
            <div class="empty-cart text-center">
                <h5>No order details</h5>
                <p>Browse our products and place an order.</p>
            </div>
        <% } %>
        

          <!-- Coupon Applied -->
          <% if (order.couponCode) { %>
            <div class="coupon-container mt-3 p-2 border rounded">
              <p class="text-success"><strong>Coupon Applied:</strong> <%= order.couponCode %> (₹<%= order.discount %> Off)</p>
            </div>
          <% } %>

          <!-- Total Amount & Cancel Order Button -->
          <div class="d-flex justify-content-between align-items-center mt-3">
           <div class="order-summary">
              <p style="color: red;" class="discount"><strong>Total Discount:</strong> ₹<%= order.discount %></p>
              <p style="color: green;" class="final-amount"><strong>Final Amount:</strong> ₹<%= order.finalAmount %></p>
          </div>

        
          
        </div>
      </div>
    </div>
  </section>

  <!-- Delivery Address Section -->
  <section class="pt-10 pb-10">
    <div class="container">
      <div class="row">
        <div class="right">
          <div class="card-header">
            <h5 class="mb-0">Delivery Address</h5>
          </div>
          <div class="cart-item">
            <p class="order-id"><strong>Name: </strong><%= address.name %></p>
            <p class="order-id"><strong>Phone: </strong><%= address.phone %></p>
            <p class="order-id"><strong>Type: </strong><%= address.addressType %></p>
            <div style="width: 200px;">
              <p><%= address.city %>, <%= address.landMark %>, <%= address.state %>, <%= address.pincode %></p>
            </div> 
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Order Details Section -->
  <section class="pt-10 pb-10">
    <div class="container">
      <div class="row">
        <div class="right">
          <div class="card-header">
            <h5 class="mb-0">Order Details</h5>
          </div>
          <div class="cart-item">
            <p class="order-id"><strong>Order ID: </strong><%= order._id.toString() %></p>
            <p class="order-id"><strong>Date: </strong><%= new Date(order.invoiceDate).toLocaleString('en-IN', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric', 
              hour: '2-digit', 
              minute: '2-digit', 
              second: '2-digit' 
            }) %></p>               
            <p class="order-id"><strong>Status: </strong><%= order.status %></p>
            <p class="order-id"><strong>Payment Method: </strong><%= order.payment_method %></p>
          </div>
        </div>
      </div>
    </div>
  </section>

</main>



<script>

  async function cancelOrder(orderId){


    try {

      console.log(orderId)

      const result = await Swal.fire({
            title: "Are you sure?",
            text: "Do you really want to cancel this order?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, cancel it",
            cancelButtonText: "Cancel"
        });

        if(result.isConfirmed){
        
          $.ajax({
            type:'post',
            url: '/admin/cancelOrder', 
            dataType:'json',
            contentType: "application/json",
            data: JSON.stringify({orderId:orderId}),
              success:function(response){
                if(response.success){
                    Swal.fire({
                    icon:'success',
                    title:'Success',
                    text: response.message,
                    showConfirmButton:false,
                    timer:1500
                })
                setTimeout(()=>{
                window.location.replace('/admin/orders')
                },2000)
                }
            else{
                    Swal.fire({
                    icon:'error',
                    title:'Error',
                    text:response.message
                })
            }
            },
            error:function(){
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again.'
                });
                }   


            })

        }

    } catch (error) {
      Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Something went wrong. Please try again.'
        });
    }
    

  }


  document.querySelectorAll('.order-status-dropdown').forEach(dropdown => {
  dropdown.addEventListener('focus', function () {
    this.setAttribute('data-previous-status', this.value);
  });

  dropdown.addEventListener('change', function () {
    const orderId = this.getAttribute('data-order-id');
    const newStatus = this.value;
    const previousStatus = this.getAttribute('data-previous-status'); 

    Swal.fire({
      title: "Are you sure?",
      text: `You are about to change the order status to "${newStatus}".`,
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#007bff",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, change it!"
    }).then((result) => {
      if (result.isConfirmed) {
        fetch('/admin/updateOrderStatus', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId, newStatus: newStatus })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: "Updated!",
              text: data.message,
              icon: "success",
              confirmButtonColor: "#28a745"
            });
            dropdown.setAttribute('data-previous-status', newStatus); 

              const statusElement = document.getElementById(`status-${orderId}`);
              statusElement.innerText = newStatus;
              statusElement.className = `order-status ${newStatus.toLowerCase()}`;

              setTimeout(()=>{
                window.location.reload()
              },1500)

          } else {
            Swal.fire({
              title: "Error!",
              text: data.message,
              icon: "error",
              confirmButtonColor: "#d33"
            });
            dropdown.value = previousStatus; 
          }
        })
        .catch(error => {
          Swal.fire({
            title: "Oops!",
            text: "Something went wrong. Please try again later.",
            icon: "error",
            confirmButtonColor: "#d33"
          });
          dropdown.value = previousStatus; 
        });
      } else {
        dropdown.value = previousStatus; 
      }
    });
  });
});


document.querySelectorAll('.item-status-dropdown').forEach(dropdown => {

// Store previous status on focus
dropdown.addEventListener('focus', function () {
  this.setAttribute('data-previous-status', this.value);
});

// Handle status change
dropdown.addEventListener('change', function () {
  const orderId = this.getAttribute('data-order-id');
  const productId = this.getAttribute('data-product-id');
  const newStatus = this.value;
  const previousStatus = this.getAttribute('data-previous-status');

  Swal.fire({
    title: "Are you sure?",
    text: `You are about to change the product status to "${newStatus}".`,
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#007bff",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, change it!"
  }).then((result) => {
    if (result.isConfirmed) {
      fetch('/admin/updateOrderStatus', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, productId, newStatus })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            title: "Updated!",
            text: data.message,
            icon: "success",
            confirmButtonColor: "#28a745"
          });

          dropdown.setAttribute('data-previous-status', newStatus);

          setTimeout(() => {
            window.location.reload();
          }, 1500);

        } else {
          Swal.fire({
            title: "Error!",
            text: data.message,
            icon: "error",
            confirmButtonColor: "#d33"
          });
          dropdown.value = previousStatus; 
        }
      })
      .catch(error => {
        Swal.fire({
          title: "Oops!",
          text: "Something went wrong. Please try again later.",
          icon: "error",
          confirmButtonColor: "#d33"
        });
        dropdown.value = previousStatus; 
      });

    } else {
      dropdown.value = previousStatus; 
    }
  });
});

});


</script>

<%- include("../partials/admin/admin-footer") %>
