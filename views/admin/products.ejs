<%- include("../partials/admin/admin-header") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">

    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f6f9;
            color: #333;
            padding-left: 280px;
            padding-right: 50px;
        }

        .content-header {
            background-color: #fff;
            padding: 20px;
            border-bottom: 1px solid #ddd;
        }

        .content-title {
            font-size: 24px;
            color: #4a4a4a;
        }

        .input-group {
            width: 100%;
            max-width: 500px;
            margin: 0 auto;
            margin-top: 10px;
        }

        .input-group input {
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 25px;
        }

        .input-group button {
            background-color: #4caf50;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            border: none;
            cursor: pointer;
        }

        .input-group button:hover {
            background-color: #45a049;
        }

        .right {
            margin-top: 30px;
        }

        table {
            width: 100%;
            margin-top: 20px;
            border-collapse: collapse;
            background-color: #fff;
            border-radius: 8px;
            overflow: hidden;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #4caf50;
            color: white;
        }

        td button {
            padding: 5px 10px;
            margin: 5px;
            font-size: 12px;
            border-radius: 5px;
            text-decoration: none;
        }

        td button a {
            color: white;
            text-decoration: none;
        }

        td button:hover {
            opacity: 0.8;
        }
    
        .btn-info {
            background-color: #17a2b8;
        }

        .btn-danger {
            background-color: #dc3545;
        }

        .btn-success {
            background-color: #28a745;
        }

        .btn-info:hover {
            background-color: #138496;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .btn-success:hover {
            background-color: #218838;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 2rem;
        }

        .table th, .table td {
            padding: 1rem;
            text-align: left;
            border: 1px solid #e5e7eb; /* Border color for all cells */
        }

        .table th {
            background: #f9fafb;
            font-weight: 600;
            color: #4b5563;
        }

        .table td {
            background: #f3f4f6;
            color: #4b5563;
        }

        .table tr:last-child td {
            border-bottom: none; /* No border for the last row */
        }

        .table tr:hover {
            background: #e5e7eb;
        }


        @media (max-width: 768px) {
            .input-group {
                width: 100%;
                margin-left: 0;
            }

            table {
                font-size: 12px;
            }

            th, td {
                padding: 10px;
            }

            td button {
                font-size: 10px;
                padding: 5px;
            }
        }

        .pagination {
            display: flex;
            justify-content: center; /* Center it horizontally */
            align-items: center; /* Align it vertically */
            padding: 10px 0; /* Add some space around */
            gap: 5px; /* Space between the buttons */
            margin-left: 20px; /* Slightly move the pagination to the right */
        }

        .pagination .page-item {
            list-style: none;
        }

        .pagination .page-item a {
            display: block;
            padding: 8px 12px;
            font-size: 14px;
            color: #007bff; /* Default color */
            text-decoration: none;
            border: 1px solid #ddd; /* Border for buttons */
            border-radius: 4px; /* Rounded corners */
            background-color: #fff; /* Button background */
            transition: all 0.3s ease; /* Smooth hover effect */
        }

        .pagination .page-item a:hover {
            background-color: #007bff; /* Change on hover */
            color: #fff; /* Text color on hover */
            border-color: #007bff; /* Border color on hover */
        }

        .pagination .page-item.active a {
            background-color: #4caf50; /* Active button color */
            color: white;
            border-color: #4caf50;
            pointer-events: none; /* Disable click on active button */
        }

        .modal {
            display: none; /* Hidden by default */
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Transparent black overlay */
        }

        .modal-content {
            background-color: white;
            width: 50%;
            margin: 15% auto;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            position: relative;
        }

        /* Close Button */
        .close-btn {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 20px;
            cursor: pointer;
        }

        .close-btn:hover {
            color: red;
        }

        /* Form Styles */
        .modal-form {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .modal-form input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .modal-form button {
            padding: 10px;
            border: none;
            background-color: blue;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }

        .modal-form button:hover {
            background-color: darkblue;
        }

        .text-danger {
        color: red;
        font-size: 14px;
        font-weight: bold;
        display: block;
        margin-top: 5px;
        }   


    </style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


</head>
<div class="content-header">
    <div>
        <h2 class="content-title card-title">Products</h2>
    </div>
</div>
<header class="card-header text-center mb-20">
    <form action="" method="get" class="d-inline">
        <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin-left: 230px;">
            <input type="text" class="form-control border-0 rounded-pill" placeholder="Search products or brands" name="search">
            <button class="btn  border-0" type="submit">Search</button>
        </div>
        
    </form>
</header>
<div class="right mt-5">
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col"><b>Product name</b></th>
                <th scope="col"><b>Category</b></th>
                <th scope="col"><b>Sale Price</b></th>
                <th scope="col"><b>Quantity</b></th>
                <th scope="col"><b>Action</b></th>
                <th scope="col"><b>Edit</b></th>
                <th scope="col"><b>Offer(%)</b></th>
                <th scope="col"><b>Edit Offer</b></th>
            </tr>
        </thead>
        <tbody>
            <% for(let i=data.length-1;i>=0;i--) {%>
            <tr>
                <td><%=data[i].productName %></td>
                <td><%=data[i]?.category?.name %></td>
                <td><%=data[i].salePrice %></td>
                <td><%=data[i].quantity %></td>

           
                <td>
                    <% if (data[i].isBlocked === false) { %>
                        <button class="btn btn-danger" style="width: 80px;" onclick="confirmBlock('<%= data[i]._id %>')">
                            Block
                        </button>
                    <% } else { %>
                        <button class="btn btn-success" style="width: 80px;" onclick="confirmUnblock('<%= data[i]._id %>')">
                            Unblock
                        </button>
                    <% } %>
                    
                </td>
                <td>
                    <button class="btn btn-info" style="width: 80px;">
                        <a href="/admin/editProduct/<%= data[i]._id %>" class="text-white" style="text-decoration: none;">Edit</a>
                    </button>
                </td>
                <td><%=data[i].categoryOffer || 0  %></td>
                <td>
                    <% if (data[i].offer && data[i].offer > 0) { %>
                        <button onclick="removeOffer('<%= data[i]._id %>')" class="btn btn-info" style="width: 80px; color: white;">Remove Offer</button>
                    <% } else { %>
                        <button onclick="openModal('<%= data[i]._id %>')" class="btn btn-info" style="width: 80px; color: white;">Add Offer</button>
                    <% } %>
                </td>

            </tr>
            <% } %>
        </tbody>

    </table>
</div>
</div>
</div>

   <!-- Modal -->
        <div id="offerModal" class="modal">
            <div class="modal-content">
                <span class="close-btn" onclick="closeModal()">&times;</span>
                <h2>Set Offer Details</h2><br>

                <form id="offerForm" class="modal-form">
                    <label for="offer">Offer (%)</label>
                    <input type="number" id="offer" name="offer" placeholder="Enter offer percentage">
                    <span id="offerError" class="text-danger"></span>

                    <label for="endDate">End Date</label>
                    <input type="date" id="endDate" name="endDate">
                    <span id="endDateError" class="text-danger"></span>

                    <!-- Changed button type to submit -->
                    <button type="submit">Save Offer</button> 
                </form>
            </div>
        </div>



<div class="container mt-3">
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center mb-20" style="margin-right: 200px;">
 
 
            <% for (let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%=(i === currentPage) ? 'active' : '' %>">
                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
            </li>
            <% } %>
 
 
        </ul>
    </nav>
 </div>
 
 <script>

async function confirmBlock(productId) {
        const result = await Swal.fire({
            title: "Are you sure?",
            text: "Do you really want to block this product?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, Block it!",
            cancelButtonText: "No, Cancel"
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch(`/admin/blockProducts?id=${productId}`, {
                    method: 'POST'
                });
                if (response.ok) {
                    Swal.fire("Blocked!", "The product has been blocked.", "success").then(() => location.reload());
                } else {
                    Swal.fire("Failed!", "Failed to block product.", "error");
                }
            } catch (error) {
                Swal.fire("Error!", "An error occurred while blocking the product.", "error");
            }
        }
    }

    async function confirmUnblock(productId) {
        const result = await Swal.fire({
            title: "Are you sure?",
            text: "Do you really want to unblock this product?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, Unblock it!",
            cancelButtonText: "No, Cancel"
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch(`/admin/unblockProducts?id=${productId}`, {
                    method: 'POST'
                });
                if (response.ok) {
                    Swal.fire("Unblocked!", "The product has been unblocked.", "success").then(() => location.reload());
                } else {
                    Swal.fire("Failed!", "Failed to unblock product.", "error");
                }
            } catch (error) {
                Swal.fire("Error!", "An error occurred while unblocking the product.", "error");
            }
        }
    }



        let selectedProductId = null;

        // Open Modal
        function openModal(productId) {
            selectedProductId = productId;
            document.getElementById("offerModal").style.display = "block";
            document.getElementById("offerError").textContent = "";
            document.getElementById("endDateError").textContent = "";
        }
        
        // Close Modal
        function closeModal() {
            document.getElementById("offerModal").style.display = "none";
            document.getElementById("offerError").textContent = "";
            document.getElementById("endDateError").textContent = "";
        }
        
        // Close when clicking outside the modal
        window.onclick = function (event) {
            let modal = document.getElementById("offerModal");
            if (event.target === modal) {
                closeModal();
            }
        };
        
        document.getElementById("offerForm").addEventListener("submit", submitOffer);
        
        // Clear errors on user input
        document.getElementById("offer").addEventListener("input", function () {
            document.getElementById("offerError").textContent = "";
        });
        
        document.getElementById("endDate").addEventListener("input", function () {
            document.getElementById("endDateError").textContent = "";
        });
        
        async function submitOffer(event) {
            event.preventDefault();
        
            const offerValue = document.getElementById("offer").value.trim();
            const endDateValue = document.getElementById("endDate").value.trim();
            const today = new Date().toISOString().split("T")[0];
        
            let isValid = true;
            document.getElementById("offerError").textContent = "";
            document.getElementById("endDateError").textContent = "";
        
            if (!offerValue) {
                document.getElementById("offerError").textContent = "Offer cannot be empty.";
                isValid = false;
            } else if (isNaN(offerValue) || offerValue < 1 || offerValue > 100) {
                document.getElementById("offerError").textContent = "Offer must be between 1% and 100%.";
                isValid = false;
            }
        
            if (!endDateValue) {
                document.getElementById("endDateError").textContent = "End date is required.";
                isValid = false;
            } else if (endDateValue < today) {
                document.getElementById("endDateError").textContent = "End date must be in the future.";
                isValid = false;
            }
        
            if (!selectedProductId) {
                Swal.fire({
                    title: "Error!",
                    text: "Product ID is missing.",
                    icon: "error",
                    confirmButtonText: "OK"
                });
                return;
            }
        
            if (!isValid) return;
        
            const confirmation = await Swal.fire({
                title: "Are you sure?",
                text: `You are about to add an offer of ${offerValue}% valid until ${endDateValue}.`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, add offer!",
                cancelButtonText: "Cancel",
                reverseButtons: true
            });
        
            if (!confirmation.isConfirmed) return;
        
            try {
                const response = await fetch("/admin/addOffer", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ offer: offerValue, endDate: endDateValue, productId: selectedProductId })
                });
        
                const result = await response.json();
        
                if (result.success) {
                    Swal.fire({
                        title: "Success!",
                        text: result.message,
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                        closeModal();
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: "Error!",
                        text: result.message || "Failed to add offer.",
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                }
            } catch (error) {
                console.error("Error submitting offer:", error);
                Swal.fire({
                    title: "Error!",
                    text: "Something went wrong. Please try again.",
                    icon: "error",
                    confirmButtonText: "OK"
                });
            }
        }


        async function removeOffer(productId) {
            const confirmation = await Swal.fire({
                title: "Are you sure?",
                text: `Do you want to remove the offer.`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, remove offer!",
                cancelButtonText: "Cancel",
                reverseButtons: true
            });
        
            if (!confirmation.isConfirmed) return;
        
            try {
                const response = await fetch("/admin/removeOffer", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ productId: productId })
                });
        
                const result = await response.json();
        
                if (result.success) {
                    Swal.fire({
                        title: "Success!",
                        text: result.message,
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: "Error!",
                        text: result.message || "Failed to remove offer.",
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                }
            } catch (error) {
                console.error("Error removing offer:", error);
                Swal.fire({
                    title: "Error!",
                    text: "Something went wrong. Please try again.",
                    icon: "error",
                    confirmButtonText: "OK"
                });
            }
        }

</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<%- include("../partials/admin/admin-footer") %>

