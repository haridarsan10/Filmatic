  <%- include("../partials/admin/admin-header") %>

    <head>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>

   <style>
  /* General Body Styling */
  body {
    font-family: 'Roboto', sans-serif;
    background-color: #f9f9f9;
    color: #333;
    margin: 0;
    padding: 20px;
    padding-left: 250px;
  }

  /* Header Styling */
  .content-header h2 {
    font-size: 28px;
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 20px;
  }

  /* Card Component */
  .card {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
  }

  .card-header {
    background-color: #007bff;
    color: #ffffff;
    font-size: 18px;
    font-weight: 600;
    padding: 15px;
    border-radius: 8px 8px 0 0;
  }

  .card-body {
    padding: 20px;
  }

  /* Form Styling */
  .form-label {
    font-weight: 600;
    color: #555;
    margin-bottom: 8px;
    display: block;
  }

  .form-control,
  .form-select {
    width: 100%;
    border: 1px solid #ced4da;
    border-radius: 6px;
    padding: 10px;
    font-size: 14px;
    color: #495057;
    transition: all 0.3s ease;
  }

  .form-control:focus,
  .form-select:focus {
    border-color: #007bff;
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
  }

  .error-message {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 5px;
  }

  /* Thumbnail and Image Cropper */
  .thumbnails-container {
    display: flex;
    gap: 10px;
    padding: 10px;
    border: 1px dashed #ccc;
    background-color: #fafafa;
    border-radius: 6px;
    margin-top: 15px;
    overflow-x: auto;
  }

  .thumbnail img {
    max-width: 100px;
    border-radius: 4px;
    border: 1px solid #ddd;
  }

  /* .image-cropper {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 8px;
    padding: 10px;
    margin-top: 15px;
  } */

  img {
    max-width: 100%;
    border-radius: 8px;
    border: 1px solid #ddd;
  }

  /* Button Styling */
  .btn {
    background-color: #007bff;
    color: #ffffff;
    font-size: 14px;
    font-weight: 600;
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    text-transform: uppercase;
    transition: all 0.3s ease;
  }

  .btn:hover {
    background-color: #0056b3;
  }

  .btn-sm {
    padding: 8px 16px;
    font-size: 12px;
  }

  button:focus {
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
  }

  .btn-md {
    font-size: 16px;
    padding: 12px 25px;
  }

  /* Layout Adjustments */
  .content-main {
    padding: 30px;
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
  }

  .row {
    display: flex;
    flex-wrap: wrap;
    margin: -10px;
  }

  .col-lg-4,
  .col-lg-6,
  .col-sm-6 {
    padding: 10px;
    flex: 1;
    min-width: 250px;
  }

  .align-items-center {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    body {
      padding: 10px;
    }

    .content-header h2 {
      font-size: 24px;
    }

    .card {
      margin-bottom: 15px;
    }

    .btn {
      width: 100%;
      text-align: center;
    }

    .image-cropper {
      width: 100%;
      height: auto;
    }
  }

  .image-cropper img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain; /* This ensures the image fits within the container */
}
</style>

    

    <section class="content-main">
      <!-- <div class="row">
        <div class="col-9">
          <div class="content-header">
            <h2 class="content-title">Add New Product</h2>
          </div>
        </div> -->
        <div class="col-lg-6">
          <div class="card mb-4">
            <div class="card-body">
              <h2 class="content-title">Add New Product</h2><br>
              <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                <div class="mb-4">
                  <label for="product_name" class="form-label">Product Name</label>
                  <input type="text" placeholder="Type here" name="productName" class="form-control border"
                    id="product_name">
                  <div id="productName-error" class="error-message"></div>
                </div>
                <!-- <div class="col-lg-4 mb-4">
                  <label class="form-label">Brand</label>
                  <select class="form-select border" name="brand">


                    <option value="">




                    </option>


                  </select>
                  <div id="brand-error" class="error-message"></div>
                </div> -->
                <div class="mb-4">
                  <label class="form-label">Full description</label>
                  <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
                    rows="4"></textarea>
                  <div id="description-error" class="error-message"></div>
                </div>
                <div class="row">
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Regular price</label>
                      <input placeholder="₹" name="regularPrice" type="text" class="form-control border">
                      <div id="regularPrice-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Sale price</label>
                      <input placeholder="₹" name="salePrice" type="text" class="form-control border">

                    </div>
                    <div id="salePrice-error" class="error-message"></div>
                  </div>
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Quantity</label>
                      <input placeholder="" name="quantity" type="text" class="form-control border">
                      <div id="quantity-error" class="error-message"></div>
                    </div>
                  </div>
                </div>
                <div class="row">

                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Color</label>
                      <input name="color" type="text" class="form-control border">
                    </div>
                    <div id="color-error" class="error-message"></div>
                  </div>

                </div>
                <div class="card mb-4">
                  <div class="card-body">
                    <div class="row gx-2">
                      <div class="col-sm-6 mb-3">
                        <label class="form-label">Category</label>
                        <select class="form-select border" style="width: 150px;" name="category">

                          <% for(let i=0;i<category.length;i++) {%>

                          <option value="<%= category[i].name %>">
                            <%= category[i].name %>
                          </option>

                          <% } %>

                        </select>
                        <div id="category-error" class="error-message"></div>
                      </div>
                    </div>
                  </div>
                </div>                    
                
                <div class="card mb-2">
                  <div class="card-header">
                    <h4>Choose images</h4>
                  </div>
                  
                  <!-- Image Input 1 -->
                  <div class="row">
                    <div class="col-lg-6">
                      <div class="card-body align-items-center" style="margin-bottom: 20px;">
                        <img src="" alt="" id="imgView1">
                        <input class="form-control" type="file" name="images" id="input1"
                          accept="image/png, image/jpeg, image/jpg" onchange="viewImage1(event), viewImage(event, 1)">
                        <div id="images-error" class="error-message"></div>
                      </div>
                      <div class="image-cropper d-flex align-items-center"
                        style="width: 300px; height: 200px; margin-bottom: 20px;">
                        <img src="" id="croppedImg1" alt="">
                        <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Image Input 2 -->
                  <div class="row">
                    <div class="col-lg-6">
                      <div class="card-body align-items-center" style="margin-bottom: 20px;">
                        <img src="" alt="" id="imgView2">
                        <input class="form-control" type="file" name="images" id="input2"
                          accept="image/png, image/jpeg, image/jpg" onchange="viewImage2(event), viewImage(event, 2)">
                        <div id="images-error" class="error-message"></div>
                      </div>
                      <div class="image-cropper d-flex align-items-center"
                        style="width: 300px; height: 200px; margin-bottom: 20px;">
                        <img src="" id="croppedImg2" alt="">
                        <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Image Input 3 -->
                  <div class="row">
                    <div class="col-lg-6">
                      <div class="card-body align-items-center" style="margin-bottom: 20px;">
                        <img src="" alt="" id="imgView3">
                        <input class="form-control" type="file" name="images" id="input3"
                          accept="image/png, image/jpeg, image/jpg" onchange="viewImage3(event), viewImage(event, 3)">
                        <div id="images-error" class="error-message"></div>
                      </div>
                      <div class="image-cropper d-flex align-items-center"
                        style="width: 300px; height: 200px; margin-bottom: 20px;">
                        <img src="" id="croppedImg3" alt="">
                        <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                      </div>
                    </div>
                  </div>
                </div>
                
            </div>
            <div>
              <button class="btn btn-md rounded font-sm hover-up" type="submit" onclick="return validateAndSubmit()
  ">Publish</button>
            </div>
            </form>
          </div>
        </div>
      </div>
      </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>

      function validateAndSubmit(){
        if(validateForm()){
          document.forms[0].submit()
        }
      }


      function viewImage1(event){
        document.getElementById('imgView1').src=URL.createObjectURL(event.target.files[0])
      }

      function viewImage2(event){
        document.getElementById('imgView2').src=URL.createObjectURL(event.target.files[0])
      }
      
      function viewImage3(event){
        document.getElementById('imgView3').src=URL.createObjectURL(event.target.files[0])
      }


      function viewImage(evt, index) {
  const input = evt.target;

  if (!input.files || input.files.length === 0) {
    console.error('No file selected');
    return;
  }

  const reader = new FileReader();
  reader.onload = function () {
    const dataURL = reader.result;

    const image = document.getElementById('imgView' + index);
    const croppedImage = document.getElementById('croppedImg' + index);
    const cropperContainer = croppedImage?.parentNode;

    if (!image || !croppedImage || !cropperContainer) {
      console.error('Required elements not found');
      return;
    }

    image.src = dataURL;

    // Destroy any existing Cropper instance
    if (image.cropper) {
      image.cropper.destroy();
    }

    // Initialize Cropper.js
    const cropper = new Cropper(image, {
      aspectRatio: 1,
      viewMode: 1,
      guides: true,
      background: false,
      autoCropArea: 1,
      zoomable: true,
    });

    cropperContainer.style.display = 'block';

    const saveButton = document.querySelector('#saveButton' + index);
    saveButton.addEventListener('click', async () => {
      const croppedCanvas = cropper.getCroppedCanvas();

      if (croppedCanvas) {
        const croppedImageDataURL = croppedCanvas.toDataURL('image/jpeg', 1.0);
        croppedImage.src = croppedImageDataURL;

        const timestamp = new Date().getTime();
        const filename = `cropped-img-${timestamp}-${index}.png`;

        await croppedCanvas.toBlob((blob) => {
          const input = document.getElementById('input' + index);
          const fileList = new DataTransfer();
          fileList.items.add(new File([blob], filename));
          input.files = fileList.files;
        });

        cropperContainer.style.display = 'none';
        cropper.destroy();
      }
    });
  };

  reader.onerror = () => {
    console.error('Failed to read the file');
  };

  reader.readAsDataURL(input.files[0]);
}

const selectedImages = [];

document.getElementById('input1').addEventListener('change', handleFileSelect);

function handleFileSelect(event) {
  const addedImagesContainer = document.getElementById('addedImagesContainer');
  addedImagesContainer.innerHTML = '';

  const files = event.target.files;
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    selectedImages.push(file);

    // Create thumbnail container
    const thumbnail = document.createElement('div');
    thumbnail.classList.add('thumbnail');

    // Add image thumbnail
    const img = document.createElement('img');
    img.src = URL.createObjectURL(file);
    img.alt = 'thumbnail';
    img.style.width = '50px';
    img.style.height = 'auto';

    // Add remove button
    const removeIcon = document.createElement('span');
    removeIcon.classList.add('remove-icon');
    removeIcon.innerHTML = '&times;';
    removeIcon.addEventListener('click', function () {
      const index = selectedImages.indexOf(file);
      if (index !== -1) {
        selectedImages.splice(index, 1);
      }
      thumbnail.remove();
    });

    thumbnail.appendChild(img);
    thumbnail.appendChild(removeIcon);
    addedImagesContainer.appendChild(thumbnail);
  }
}


saveButton.addEventListener('click', async () => {
  const croppedCanvas = cropper.getCroppedCanvas();

  if (croppedCanvas) {
    // Convert the cropped image to a Data URL
    const croppedDataUrl = croppedCanvas.toDataURL('image/jpeg');
    croppedImage.src = croppedDataUrl;

    // Optionally, you can convert it to a Blob and send it to the server
    croppedCanvas.toBlob((blob) => {
      // Example: Upload the cropped image to the server using FormData
      const formData = new FormData();
      formData.append('croppedImage', blob, `cropped-image-${index}.jpg`);

      fetch('/upload-cropped-image', {
        method: 'POST',
        body: formData,
      })
        .then((response) => response.json())
        .then((data) => {
          console.log('Image successfully uploaded:', data);
        })
        .catch((error) => {
          console.error('Error uploading image:', error);
        });
    }, 'image/jpeg');
  }
});



      function validateForm() {
                clearErrorMessages();
                const name = document.getElementsByName('productName')[0].value;
                const description = document.getElementById('descriptionid').value;
                const brand = document.getElementsByName('brand')[0].value;
                const price = document.getElementsByName('regularPrice')[0].value;
                const saleprice = document.getElementsByName('salePrice')[0].value;
                const color = document.getElementsByName('color')[0].value;
                const category = document.getElementsByName('category')[0].value;
                const images = document.getElementById('input1')
                const quantity=document.getElementsByName('quantity')
                let isValid = true
                if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }
              
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(description.trim())) {
        displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
        isValid = false;
    }
    
                if ( parseInt(quantity) < 0) {
                    displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                    isValid = false;
                }
    
    
    
    
                if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                    displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                    isValid = false;
                }
    
    
    
    
                if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                    displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                    isValid = false;
                }
                if (parseFloat(price) <= parseFloat(saleprice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }
    
    
                if (color.trim() === "") {
                    displayErrorMessage('color-error', 'Please enter a color.');
                    isValid = false;
                }
    
    
                if (images.files.length === 0) {
                    displayErrorMessage("images-error",'Please select an image.');
                    isValid = false;
                }
                return isValid;
            }


            function displayErrorMessage(elementId, message) {
                var errorElement = document.getElementById(elementId);
                errorElement.innerText = message;
                errorElement.style.display = "block";
            }
    
    
            function clearErrorMessages() {
                const errorElements = document.getElementsByClassName('error-message');
                Array.from(errorElements).forEach(element => {
                    element.innerText = '';
                });
                const errorMessage = document.getElementById('errorMessage');
    
    
            }


    </script>


    <%- include("../partials/admin/admin-footer") %>