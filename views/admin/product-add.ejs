  <%- include("../partials/admin/admin-header") %>

    <head>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>

   <style>
  /* General Body Styling */
  body {
    font-family: 'Roboto', sans-serif;
    background-color: #f9f9f9;
    color: #333;
    margin: 0;
    padding: 20px;
    padding-left: 250px;
  }

  /* Header Styling */
  .content-header h2 {
    font-size: 28px;
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 20px;
  }

  /* Card Component */
  .card {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
  }

  .card-header {
    background-color: #007bff;
    color: #ffffff;
    font-size: 18px;
    font-weight: 600;
    padding: 15px;
    border-radius: 8px 8px 0 0;
  }

  .card-body {
    padding: 20px;
  }

  /* Form Styling */
  .form-label {
    font-weight: 600;
    color: #555;
    margin-bottom: 8px;
    display: block;
  }

  .form-control,
  .form-select {
    width: 100%;
    border: 1px solid #ced4da;
    border-radius: 6px;
    padding: 10px;
    font-size: 14px;
    color: #495057;
    transition: all 0.3s ease;
  }

  .form-control:focus,
  .form-select:focus {
    border-color: #007bff;
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
  }

  .error-message {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 5px;
  }

  /* Thumbnail and Image Cropper */
  .thumbnails-container {
    display: flex;
    gap: 10px;
    padding: 10px;
    border: 1px dashed #ccc;
    background-color: #fafafa;
    border-radius: 6px;
    margin-top: 15px;
    overflow-x: auto;
  }

  .thumbnail img {
    max-width: 100px;
    border-radius: 4px;
    border: 1px solid #ddd;
  }

  /* .image-cropper {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 8px;
    padding: 10px;
    margin-top: 15px;
  } */

  img {
    max-width: 100%;
    border-radius: 8px;
    border: 1px solid #ddd;
  }

  /* Button Styling */
  .btn {
    background-color: #007bff;
    color: #ffffff;
    font-size: 14px;
    font-weight: 600;
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    text-transform: uppercase;
    transition: all 0.3s ease;
  }

  .btn:hover {
    background-color: #0056b3;
  }

  .btn-sm {
    padding: 8px 16px;
    font-size: 12px;
  }

  button:focus {
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
  }

  .btn-md {
    font-size: 16px;
    padding: 12px 25px;
  }

  /* Layout Adjustments */
  .content-main {
    padding: 30px;
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
  }

  .row {
    display: flex;
    flex-wrap: wrap;
    margin: -10px;
  }

  .col-lg-4,
  .col-lg-6,
  .col-sm-6 {
    padding: 10px;
    flex: 1;
    min-width: 250px;
  }

  .align-items-center {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    body {
      padding: 10px;
    }

    .content-header h2 {
      font-size: 24px;
    }

    .card {
      margin-bottom: 15px;
    }

    .btn {
      width: 100%;
      text-align: center;
    }

    .image-cropper {
      width: 100%;
      height: auto;
    }
  }

  .image-cropper {
  max-width: 100%;
  margin-bottom: 20px;
}

.img-preview {
  max-width: 100%;
  max-height: 400px;
}

.thumbnail {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 4px;
  border: 1px solid #ddd;
}

.thumbnails-container {
  min-height: 100px;
} 
  .invalid-feedback{
    color: red;
  }

</style>

    

    <section class="content-main">
      
        <div class="col-lg-6">
          <div class="card mb-4">
            <div class="card-body">
              <h2 class="content-title">Add New Product</h2><br>
              <form method="POST" enctype="multipart/form-data" class="product-form" id="productForm">
                <!-- Basic Information Section -->
                <div class="card mb-4">
                  <div class="card-body">
                    <div class="mb-4">
                      <label for="product_name" class="form-label required">Product Name</label>
                      <input type="text" 
                             placeholder="Enter product name" 
                             name="productName" 
                             class="form-control" 
                             id="product_name"
                             >
                      <div class="invalid-feedback" id="productName-error"></div>
                    </div>
                    
                    <div class="mb-4">
                      <label for="description" class="form-label required">Description</label>
                      <textarea id="description" 
                                name="description" 
                                class="form-control" 
                                rows="4"
                                ></textarea>
                      <div class="invalid-feedback" id="description-error"></div>
                    </div>
                  </div>
                </div>
              
                <!-- Pricing Section -->
                <div class="card mb-4">
                  <div class="card-body">
                    <div class="row">
                      <div class="col-lg-4">
                        <div class="mb-4">
                          <label class="form-label required">Regular Price (₹)</label>
                          <input name="regularPrice" 
                                 type="number" 
                                 min="0" 
                                 step="0.01"
                                 class="form-control"
                                 >
                          <div class="invalid-feedback" id="regularPrice-error"></div>
                        </div>
                      </div>
                      <div class="col-lg-4">
                        <div class="mb-4">
                          <label class="form-label">Sale Price (₹)</label>
                          <input name="salePrice" 
                                 type="number" 
                                 min="0" 
                                 step="0.01"
                                 class="form-control">
                          <div class="invalid-feedback" id="salePrice-error"></div>
                        </div>
                      </div>
                      <div class="col-lg-4">
                        <div class="mb-4">
                          <label class="form-label required">Quantity</label>
                          <input name="quantity" 
                                 type="number" 
                                 min="0" 
                                 class="form-control"
                                 >
                          <div class="invalid-feedback" id="quantity-error"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              
                <!-- Category & Attributes -->
                <div class="card mb-4">
                  <div class="card-body">
                    <div class="row">
                      <div class="col-lg-6">
                        <div class="mb-4">
                          <label class="form-label required">Category</label>
                          <select class="form-select" name="category" >
                            <option value="">Select Category</option>
                            <% category.forEach(cat => { %>
                              <option value="<%= cat.name %>"><%= cat.name %></option>
                            <% }); %>
                          </select>
                          <div class="invalid-feedback" id="category-error"></div>
                        </div>
                      </div>
                      <div class="col-lg-6">
                        <div class="mb-4">
                          <label class="form-label">Color</label>
                          <input name="color" type="text" class="form-control">
                          <div class="invalid-feedback" id="color-error"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              
               <!-- Image Upload Section -->
              <div class="card mb-4">
                <div class="card-header">
                  <h3>Product Images</h3>
                </div>
                <div class="card-body">
                  <!-- Single image input -->
                  <div class="mb-4">
                    <input class="form-control" 
                          type="file" 
                          name="images" 
                          id="inputImage" 
                          accept="image/png, image/jpeg, image/jpg">
                    <div class="invalid-feedback" id="images-error"></div>
                  </div>

                  <!-- Cropper container -->
                  <div class="image-cropper" style="display: none;">
                    <div class="preview-container mb-2">
                      <img src="" alt="" id="imgView" class="img-preview">
                    </div>
                    <div class="button-container mt-2">
                      <button type="button" class="btn btn-primary" id="saveButton">Save</button>
                      <button type="button" class="btn btn-secondary" id="cancelButton">Cancel</button>
                    </div>
                  </div>

                  <!-- Thumbnails container -->
                  <div class="thumbnails-container d-flex flex-wrap gap-3 mt-3">
                    <!-- Thumbnails will be added here dynamically -->
                  </div>
                </div>
              </div>
              
                <div class="form-actions">
                  <button type="submit" class="btn btn-primary">
                    Publish Product
                  </button>
                </div>
              </form>
          </div>
        </div>
      </div>
      </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>

          const VALIDATION_RULES = {
            productName: {
              required: true,
              minLength: 3,
              errorMessage: 'Please enter a product name (minimum 3 characters).'
            },
            description: {
              required: true,
              minLength: 10,
              errorMessage: 'Please enter a product description (minimum 10 characters).'
            },
            regularPrice: {
              required: true,
              pattern: /^\d+(\.\d{1,2})?$/,
              min: 0,
              errorMessage: 'Please enter a valid non-negative price.'
            },
            salePrice: {
              pattern: /^\d+(\.\d{1,2})?$/,
              min: 0,
              errorMessage: 'Please enter a valid non-negative sale price.'
            },
            quantity: {
              required: true,
              pattern: /^\d+$/,
              min: 0,
              errorMessage: 'Please enter a valid non-negative quantity.'
            },
            category: {
              required: true,
              errorMessage: 'Please select a category.'
            },
            color: {
              required: true,
              errorMessage: 'Please enter a color.'
            }
          };

          const CONFIG = {
            maxImages: 5,
            maxFileSize: 5 * 1024 * 1024, // 5MB
            validImageTypes: ['image/jpeg', 'image/png', 'image/jpg'],
            cropperConfig: {
              aspectRatio: 1,
              viewMode: 1,
              guides: true,
              background: false,
              autoCropArea: 1,
              responsive: true,
              minContainerWidth: 300,
              minContainerHeight: 200
            }
          };

          class ImageManager {
            constructor() {
              this.cropper = null;
              this.croppedImages = [];
            }

            getCurrentImageCount() {
              return document.querySelectorAll('.thumbnails-container .thumbnail').length;
            }

            hasValidImage() {
              return this.getCurrentImageCount() > 0;
            }

            handleImageUpload(event) {
              const files = event.target.files;
              if (!files.length) return;

              if (this.getCurrentImageCount() + files.length > CONFIG.maxImages) {
                Swal.fire({
                  icon: 'warning',
                  title: 'Max Limit Reached',
                  text: `You can only upload up to ${CONFIG.maxImages} images.`
                });
                event.target.value = '';
                return;
              }

              this.validateAndProcessImage(files[0]);
            }

            validateAndProcessImage(file) {
              if (!CONFIG.validImageTypes.includes(file.type)) {
                Swal.fire({
                  icon: 'error',
                  title: 'Invalid File Type',
                  text: 'Please upload a valid image file (JPEG, PNG, JPG).'
                });
                return;
              }

              if (file.size > CONFIG.maxFileSize) {
                Swal.fire({
                  icon: 'error',
                  title: 'File Too Large',
                  text: 'Image size should be less than 5MB.'
                });
                return;
              }

              const reader = new FileReader();
              reader.onload = (e) => this.initializeCropper(e.target.result);
              reader.readAsDataURL(file);
            }

            initializeCropper(imageData) {
              const image = document.getElementById('imgView');
              image.src = imageData;

              if (this.cropper) {
                this.cropper.destroy();
              }

              this.cropper = new Cropper(image, CONFIG.cropperConfig);
              document.querySelector('.image-cropper').style.display = 'block';
            }

            saveCroppedImage() {
              if (!this.cropper) return;

              this.cropper.getCroppedCanvas().toBlob(blob => {
                const fileName = `cropped-${Date.now()}.jpg`;
                const file = new File([blob], fileName, { type: 'image/jpeg' });

                if (this.getCurrentImageCount() + 1 > CONFIG.maxImages) {
                  Swal.fire({
                    icon: 'warning',
                    title: 'Max Limit Reached',
                    text: `You can only upload up to ${CONFIG.maxImages} images.`
                  });
                  return;
                }

                this.croppedImages.push(file);
                this.updateThumbnail(file, blob);
                this.updateFileInput();
                this.resetCropper();
              }, 'image/jpeg');
            }

            updateThumbnail(file, blob) {
              const previewContainer = document.querySelector('.thumbnails-container');
              const imgElement = document.createElement('img');
              imgElement.src = URL.createObjectURL(blob);
              imgElement.classList.add('thumbnail');
              previewContainer.appendChild(imgElement);
            }

            updateFileInput() {
              const dataTransfer = new DataTransfer();
              this.croppedImages.forEach(image => dataTransfer.items.add(image));
              document.getElementById('inputImage').files = dataTransfer.files;
            }

            resetCropper() {
              if (this.cropper) {
                this.cropper.destroy();
                this.cropper = null;
              }
              document.querySelector('.image-cropper').style.display = 'none';
            }

            cancelCrop() {
              this.resetCropper();
              document.getElementById('inputImage').value = '';
              document.getElementById('imgView').src = '';
            }
          }

          class ProductFormValidator {
            constructor(formId) {
              this.form = document.getElementById(formId);
              this.imageManager = new ImageManager();
              this.init();
            }

            init() {
              if (!this.form) {
                console.error('Form not found:', formId);
                return;
              }

              // Set up image upload event listeners
              document.getElementById('inputImage')?.addEventListener('change', 
                (e) => this.imageManager.handleImageUpload(e)
              );
              
              document.getElementById('saveButton')?.addEventListener('click', 
                () => this.imageManager.saveCroppedImage()
              );
              
              document.getElementById('cancelButton')?.addEventListener('click', 
                () => this.imageManager.cancelCrop()
              );

              this.initializeRealTimeValidation();
              this.form.addEventListener('submit', (e) => this.handleSubmit(e));
            }

            initializeRealTimeValidation() {
              Object.keys(VALIDATION_RULES).forEach(fieldName => {
                const input = this.form.querySelector(`[name="${fieldName}"]`);
                if (input) {
                  input.addEventListener('blur', () => this.validateField(fieldName));
                }
              });
            }

            validateField(fieldName) {
              const input = this.form.querySelector(`[name="${fieldName}"]`);
              const rule = VALIDATION_RULES[fieldName];
              const value = input.value.trim();
              let isValid = true;
              let errorMessage = '';

              if (rule.required && !value) {
                isValid = false;
                errorMessage = rule.errorMessage;
              } else if (rule.pattern && !rule.pattern.test(value)) {
                isValid = false;
                errorMessage = rule.errorMessage;
              } else if (rule.min !== undefined && parseFloat(value) < rule.min) {
                isValid = false;
                errorMessage = rule.errorMessage;
              } else if (rule.minLength && value.length < rule.minLength) {
                isValid = false;
                errorMessage = rule.errorMessage;
              }

              this.showFieldError(fieldName, errorMessage);
              return isValid;
            }

            validatePrices() {
              const regularPrice = parseFloat(this.form.querySelector('[name="regularPrice"]').value);
              const salePrice = parseFloat(this.form.querySelector('[name="salePrice"]').value);

              if (salePrice && regularPrice <= salePrice) {
                this.showFieldError('regularPrice', 'Regular price must be greater than sale price.');
                return false;
              }
              return true;
            }

            validateImages() {
              if (!this.imageManager.hasValidImage()) {
                this.showFieldError('images', 'Please select at least one image.');
                return false;
              }
              return true;
            }

            showFieldError(fieldName, message) {
              const errorElement = document.getElementById(`${fieldName}-error`);
              if (errorElement) {
                errorElement.textContent = message;
                errorElement.style.display = message ? 'block' : 'none';
              }
            }

            clearAllErrors() {
              const errorElements = this.form.querySelectorAll('.invalid-feedback');
              errorElements.forEach(element => {
                element.textContent = '';
                element.style.display = 'none';
              });
            }

            async handleSubmit(event) {
              event.preventDefault();
              this.clearAllErrors();

              // Validate all fields
              let isValid = true;
              for (const fieldName of Object.keys(VALIDATION_RULES)) {
                if (!this.validateField(fieldName)) {
                  isValid = false;
                }
              }

              // Validate prices
              if (!this.validatePrices()) {
                isValid = false;
              }

              // Validate images
              if (!this.validateImages()) {
                isValid = false;
              }

              if (isValid) {
                try {
                  await this.submitForm();
                } catch (error) {
                  console.error('Form submission failed:', error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to submit the form. Please try again.'
                  });
                }
              }
            }

            async submitForm() {
              const formData = new FormData(this.form);

              try {
                const response = await fetch('/admin/addProducts', {
                  method: 'POST',
                  body: formData
                });

                const result = await response.json();

                if (result.success) {
                  await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: result.message,
                    timer: 1500
                  });
                  window.location.replace('/admin/products');
                } else {
                  await Swal.fire({
                    icon: 'info',
                    title: 'Info',
                    text: result.message
                  });
                }
              } catch (error) {
                throw error;
              }
            }
          }

          document.addEventListener('DOMContentLoaded', () => {
            new ProductFormValidator('productForm');
          });


    </script>


    <%- include("../partials/admin/admin-footer") %>