  <%- include("../partials/admin/admin-header") %>

    <head>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>

   <style>
  /* General Body Styling */
  body {
    font-family: 'Roboto', sans-serif;
    background-color: #f9f9f9;
    color: #333;
    margin: 0;
    padding: 20px;
    padding-left: 250px;
  }

  /* Header Styling */
  .content-header h2 {
    font-size: 28px;
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 20px;
  }

  /* Card Component */
  .card {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
  }

  .card-header {
    background-color: #007bff;
    color: #ffffff;
    font-size: 18px;
    font-weight: 600;
    padding: 15px;
    border-radius: 8px 8px 0 0;
  }

  .card-body {
    padding: 20px;
  }

  /* Form Styling */
  .form-label {
    font-weight: 600;
    color: #555;
    margin-bottom: 8px;
    display: block;
  }

  .form-control,
  .form-select {
    width: 100%;
    border: 1px solid #ced4da;
    border-radius: 6px;
    padding: 10px;
    font-size: 14px;
    color: #495057;
    transition: all 0.3s ease;
  }

  .form-control:focus,
  .form-select:focus {
    border-color: #007bff;
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
  }

  .error-message {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 5px;
  }

  /* Thumbnail and Image Cropper */
  .thumbnails-container {
    display: flex;
    gap: 10px;
    padding: 10px;
    border: 1px dashed #ccc;
    background-color: #fafafa;
    border-radius: 6px;
    margin-top: 15px;
    overflow-x: auto;
  }

  .thumbnail img {
    max-width: 100px;
    border-radius: 4px;
    border: 1px solid #ddd;
  }

  /* .image-cropper {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 8px;
    padding: 10px;
    margin-top: 15px;
  } */

  img {
    max-width: 100%;
    border-radius: 8px;
    border: 1px solid #ddd;
  }

  /* Button Styling */
  .btn {
    background-color: #007bff;
    color: #ffffff;
    font-size: 14px;
    font-weight: 600;
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    text-transform: uppercase;
    transition: all 0.3s ease;
  }

  .btn:hover {
    background-color: #0056b3;
  }

  .btn-sm {
    padding: 8px 16px;
    font-size: 12px;
  }

  button:focus {
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
  }

  .btn-md {
    font-size: 16px;
    padding: 12px 25px;
  }

  /* Layout Adjustments */
  .content-main {
    padding: 30px;
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
  }

  .row {
    display: flex;
    flex-wrap: wrap;
    margin: -10px;
  }

  .col-lg-4,
  .col-lg-6,
  .col-sm-6 {
    padding: 10px;
    flex: 1;
    min-width: 250px;
  }

  .align-items-center {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    body {
      padding: 10px;
    }

    .content-header h2 {
      font-size: 24px;
    }

    .card {
      margin-bottom: 15px;
    }

    .btn {
      width: 100%;
      text-align: center;
    }

    .image-cropper {
      width: 100%;
      height: auto;
    }
  }

  .image-cropper img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain; /* This ensures the image fits within the container */
}

  .invalid-feedback{
    color: red;
  }

</style>

    

    <section class="content-main">
      
        <div class="col-lg-6">
          <div class="card mb-4">
            <div class="card-body">
              <h2 class="content-title">Add New Product</h2><br>
              <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" class="product-form" id="productForm">
                <!-- Basic Information Section -->
                <div class="card mb-4">
                  <div class="card-body">
                    <div class="mb-4">
                      <label for="product_name" class="form-label required">Product Name</label>
                      <input type="text" 
                             placeholder="Enter product name" 
                             name="productName" 
                             class="form-control" 
                             id="product_name"
                             required>
                      <div class="invalid-feedback" id="productName-error"></div>
                    </div>
                    
                    <div class="mb-4">
                      <label for="description" class="form-label required">Description</label>
                      <textarea id="description" 
                                name="description" 
                                class="form-control" 
                                rows="4"
                                required></textarea>
                      <div class="invalid-feedback" id="description-error"></div>
                    </div>
                  </div>
                </div>
              
                <!-- Pricing Section -->
                <div class="card mb-4">
                  <div class="card-body">
                    <div class="row">
                      <div class="col-lg-4">
                        <div class="mb-4">
                          <label class="form-label required">Regular Price (₹)</label>
                          <input name="regularPrice" 
                                 type="number" 
                                 min="0" 
                                 step="0.01"
                                 class="form-control"
                                 required>
                          <div class="invalid-feedback" id="regularPrice-error"></div>
                        </div>
                      </div>
                      <div class="col-lg-4">
                        <div class="mb-4">
                          <label class="form-label">Sale Price (₹)</label>
                          <input name="salePrice" 
                                 type="number" 
                                 min="0" 
                                 step="0.01"
                                 class="form-control">
                          <div class="invalid-feedback" id="salePrice-error"></div>
                        </div>
                      </div>
                      <div class="col-lg-4">
                        <div class="mb-4">
                          <label class="form-label required">Quantity</label>
                          <input name="quantity" 
                                 type="number" 
                                 min="0" 
                                 class="form-control"
                                 required>
                          <div class="invalid-feedback" id="quantity-error"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              
                <!-- Category & Attributes -->
                <div class="card mb-4">
                  <div class="card-body">
                    <div class="row">
                      <div class="col-lg-6">
                        <div class="mb-4">
                          <label class="form-label required">Category</label>
                          <select class="form-select" name="category" required>
                            <option value="">Select Category</option>
                            <% category.forEach(cat => { %>
                              <option value="<%= cat.name %>"><%= cat.name %></option>
                            <% }); %>
                          </select>
                          <div class="invalid-feedback" id="category-error"></div>
                        </div>
                      </div>
                      <div class="col-lg-6">
                        <div class="mb-4">
                          <label class="form-label">Color</label>
                          <input name="color" type="text" class="form-control">
                          <div class="invalid-feedback" id="color-error"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              
                <!-- Image Upload Section -->
                <div class="card mb-4">
                  <div class="card-header">
                    <h3>Product Images</h3>
                  </div>
                  <div class="card-body">
                    <div class="row" id="imageUploadContainer">
                      <% [1, 2, 3].forEach(index => { %>
                        <div class="col-lg-4 mb-4">
                          <div class="image-upload-wrapper">
                            <div class="preview-container mb-2">
                              <img src="" alt="" id="imgView<%= index %>" class="img-preview">
                            </div>
                            <input class="form-control" 
                                   type="file" 
                                   name="images" 
                                   id="input<%= index %>" 
                                   accept="image/png, image/jpeg, image/jpg"
                                   onchange="viewImage(event, '<%= index %>')">
                            <div class="invalid-feedback" id="images-error<%= index %>"></div>
                          </div>
                        </div>
                      <% }); %>
                    </div>
                  </div>
                </div>
              
                <div class="form-actions">
                  <button type="submit" class="btn btn-primary">
                    Publish Product
                  </button>
                </div>
              </form>
          </div>
        </div>
      </div>
      </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>

        const VALIDATION_RULES = {
          productName: {
            required: true,
            minLength: 3,
            errorMessage: 'Please enter a product name (minimum 3 characters).'
          },
          description: {
            required: true,
            minLength: 10,
            errorMessage: 'Please enter a product description (minimum 10 characters).'
          },
          regularPrice: {
            required: true,
            pattern: /^\d+(\.\d{1,2})?$/,
            min: 0,
            errorMessage: 'Please enter a valid non-negative price.'
          },
          salePrice: {
            pattern: /^\d+(\.\d{1,2})?$/,
            min: 0,
            errorMessage: 'Please enter a valid non-negative sale price.'
          },
          quantity: {
            required: true,
            pattern: /^\d+$/,
            min: 0,
            errorMessage: 'Please enter a valid non-negative quantity.'
          },
          color: {
            required: true,
            errorMessage: 'Please enter a color.'
          }
        };

        // Main form validation class
        class ProductFormValidator {
          constructor(formId) {
            this.form = document.getElementById(formId);
            this.imageUploaders = [];
            this.init();
          }

          init() {
            // Initialize form event listeners
            this.form.addEventListener('submit', (e) => this.handleSubmit(e));
            
            // Initialize image uploaders
            for (let i = 1; i <= 3; i++) {
              this.initializeImageUploader(i);
            }

            // Initialize real-time validation
            this.initializeRealTimeValidation();
          }

          initializeRealTimeValidation() {
            Object.keys(VALIDATION_RULES).forEach(fieldName => {
              const input = this.form.querySelector(`[name="${fieldName}"]`);
              if (input) {
                input.addEventListener('blur', () => this.validateField(fieldName));
              }
            });
          }

          validateField(fieldName) {
            const input = this.form.querySelector(`[name="${fieldName}"]`);
            const rule = VALIDATION_RULES[fieldName];
            const value = input.value.trim();
            let isValid = true;
            let errorMessage = '';

            if (rule.required && !value) {
              isValid = false;
              errorMessage = rule.errorMessage;
            } else if (rule.pattern && !rule.pattern.test(value)) {
              isValid = false;
              errorMessage = rule.errorMessage;
            } else if (rule.min !== undefined && parseFloat(value) < rule.min) {
              isValid = false;
              errorMessage = rule.errorMessage;
            } else if (rule.minLength && value.length < rule.minLength) {
              isValid = false;
              errorMessage = rule.errorMessage;
            }

            this.showFieldError(fieldName, errorMessage);
            return isValid;
          }

          validatePrices() {
            const regularPrice = parseFloat(this.form.querySelector('[name="regularPrice"]').value);
            const salePrice = parseFloat(this.form.querySelector('[name="salePrice"]').value);

            if (salePrice && regularPrice <= salePrice) {
              this.showFieldError('regularPrice', 'Regular price must be greater than sale price.');
              return false;
            }
            return true;
          }

          showFieldError(fieldName, message) {
            const errorElement = document.getElementById(`${fieldName}-error`);
            if (errorElement) {
              errorElement.textContent = message;
              errorElement.style.display = message ? 'block' : 'none';
            }
          }

          clearAllErrors() {
            const errorElements = this.form.querySelectorAll('.invalid-feedback');
            errorElements.forEach(element => {
              element.textContent = '';
              element.style.display = 'none';
            });
          }

          initializeImageUploader(index) {
            const inputElement = document.getElementById(`input${index}`);
            const previewElement = document.getElementById(`imgView${index}`);
            
            if (!inputElement || !previewElement) return;

            const uploader = new ImageUploader(inputElement, previewElement, index);
            this.imageUploaders.push(uploader);
          }

          validateImages() {
            let hasValidImage = false;
            for (const uploader of this.imageUploaders) {
              if (uploader.hasValidImage()) {
                hasValidImage = true;
                break;
              }
            }

            if (!hasValidImage) {
              this.showFieldError('images-error1', 'Please select at least one image.');
              return false;
            }
            return true;
          }

          async handleSubmit(event) {
            event.preventDefault();
            this.clearAllErrors();

            // Validate all fields
            let isValid = true;
            for (const fieldName of Object.keys(VALIDATION_RULES)) {
              if (!this.validateField(fieldName)) {
                isValid = false;
              }
            }

            // Validate prices
            if (!this.validatePrices()) {
              isValid = false;
            }

            // Validate images
            if (!this.validateImages()) {
              isValid = false;
            }

            if (isValid) {
              try {
                await this.submitForm();
              } catch (error) {
                console.error('Form submission failed:', error);
                // Show error message to user
              }
            }
          }

          async submitForm() {
    const formData = new FormData(this.form);

    try {
        const response = await fetch(this.form.action, {
            method: 'POST',
            body: formData
        });

        const result = await response.json(); 

        if (response.ok) { 
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: result.message,
                showConfirmButton: false,
                timer:1500
            }).then(() => {
                setTimeout(()=>{
                  window.location.replace('/admin/products') 
                },1000)
            });
        } else {
            Swal.fire({
                icon: 'info',
                title: 'Info',
                text: result.message || 'Something went wrong!',
                showConfirmButton: false,
            });
        }

            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong! Please try again.'
                });
            }
        }
      
      }

        // Image handling class
        class ImageUploader {
          constructor(inputElement, previewElement, index) {
            this.input = inputElement;
            this.preview = previewElement;
            this.index = index;
            this.cropper = null;
            
            this.init();
          }

          init() {
            this.input.addEventListener('change', (e) => this.handleImageSelect(e));
          }

          hasValidImage() {
            return this.input.files && this.input.files.length > 0;
          }

          async handleImageSelect(event) {
            const file = event.target.files[0];
            if (!file) return;

            if (!this.validateImage(file)) {
              this.input.value = '';
              return;
            }

            try {
              const dataUrl = await this.readFileAsDataURL(file);
              await this.initializeCropper(dataUrl);
            } catch (error) {
              console.error('Error processing image:', error);
              this.showError('Error processing image. Please try again.');
            }
          }

          validateImage(file) {
            const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];
            const maxSize = 5 * 1024 * 1024; // 5MB

            if (!validTypes.includes(file.type)) {
              this.showError('Please select a valid image file (JPEG, PNG).');
              return false;
            }

            if (file.size > maxSize) {
              this.showError('Image size should be less than 5MB.');
              return false;
            }

            return true;
          }

          showError(message) {
            const errorElement = document.getElementById(`images-error${this.index}`);
            if (errorElement) {
              errorElement.textContent = message;
              errorElement.style.display = 'block';
            }
          }

          readFileAsDataURL(file) {
            return new Promise((resolve, reject) => {
              const reader = new FileReader();
              reader.onload = () => resolve(reader.result);
              reader.onerror = () => reject(new Error('File reading failed'));
              reader.readAsDataURL(file);
            });
          }

          async initializeCropper(dataUrl) {
            // Destroy existing cropper if any
            if (this.cropper) {
              this.cropper.destroy();
            }

            this.preview.src = dataUrl;

            // Initialize Cropper.js
            this.cropper = new Cropper(this.preview, {
              aspectRatio: 1,
              viewMode: 1,
              guides: true,
              background: false,
              autoCropArea: 1,
              zoomable: true,
              crop: (event) => {
                // Optional: Handle crop event
              }
            });
          }

          async getCroppedImage() {
            if (!this.cropper) return null;

            const canvas = this.cropper.getCroppedCanvas({
              width: 800,
              height: 800,
              imageSmoothingEnabled: true,
              imageSmoothingQuality: 'high'
            });

            return new Promise((resolve) => {
              canvas.toBlob((blob) => {
                if (!blob) {
                  resolve(null);
                  return;
                }

                const fileName = `product-image-${Date.now()}-${this.index}.jpg`;
                const file = new File([blob], fileName, { type: 'image/jpeg' });
                resolve(file);
              }, 'image/jpeg', 0.9);
            });
          }
        }

        // Initialize the form validator
        document.addEventListener('DOMContentLoaded', () => {
          const productForm = new ProductFormValidator('productForm');
        });


    </script>


    <%- include("../partials/admin/admin-footer") %>