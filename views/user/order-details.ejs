<%- include("../../views/partials/user/header") %>

<style>
/* General Styles */
body {
  overflow-x: hidden;
}

/* Table */
.table {
  width: 100%;
  table-layout: fixed;
}

/* Card Styling */
.card {
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  background: #ffffff;
  margin-bottom: 20px;
}

.card-header {
  color: #343a40;
  background: #f8f9fa;
  padding: 10px;
  text-align: center;
  font-size: 18px;
  font-weight: bold;
  border-radius: 12px 12px 0 0;
}

/* Sidebar Styling */
.dashboard-menu {
  background-color: #ffffff;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  height: 350px;
  width: 290px;
  margin-left: 15px;
  flex: 0 0 290px;
}

.dashboard-menu .nav-link {
  font-weight: bold;
  color: #2c3e50;
  padding: 10px 15px;
  border-radius: 8px;
  transition: all 0.3s ease-in-out;
}

.dashboard-menu .nav-link:hover, 
.dashboard-menu .nav-link.active {
  background-color: #007bff;
  color: #ffffff;
  box-shadow: 0 4px 15px rgba(0, 123, 255, 0.4);
}

/* Layout */
.container {
  display: flex;
  justify-content: center;

}

.row {
  display: flex;
  align-items: flex-start;
  flex-wrap: nowrap;
  width: 100%;
}

/* Orders Sidebar */
.right {
  width: 100%;
  background: #ffffff;
  padding: 20px;
  border-radius: 12px;
  margin-top: 20px;
  margin-bottom: 50px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

/* Order Items */
.cart-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: #f8f9fa;
  padding: 15px;
  border-radius: 10px;
  margin-bottom: 15px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Order Image */
.cart-item img {
  width: 80px;
  height: 80px;
  border-radius: 8px;
  object-fit: cover;
}

/* Order Details */
.order-details {
  flex-grow: 1;
  padding-left: 15px;
}

.order-id {
  font-size: 14px;
  color: #333;
}

.cart-item-price {
  font-size: 16px;
  color: #d9534f;
  font-weight: bold;
}

/* Order Status */
.order-status {
  display: inline-block;
  padding: 5px 10px;
  border-radius: 6px;
  font-weight: bold;
  text-align: center;
}

.order-status.pending {
  background-color: orange;
}

.order-status.shipped {
  background-color: blue;
}

.order-status.delivered {
  background-color: green;
}

.order-status.cancelled {
  background-color: red;
}

/* View Order Button */
.view-order {
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background 0.3s ease-in-out;
}

.view-order:hover {
  background-color: #0056b3;
}

/* No Orders Message */
.no-orders {
  text-align: center;
  padding: 20px;
  font-size: 16px;
  color: #555;
}

.breadcrumb-container {
    font-family: Arial, sans-serif;
    font-size: 14px;
  }

  .breadcrumb {
    background-color: #ffffff;
    list-style: none;
    display: flex;
    align-items: center;
    padding-left: 50px;
    
  }

  .breadcrumb li {
    display: flex;
    align-items: center;
  }

  .breadcrumb a {
    text-decoration: none;
    color: #000000;
    font-weight: 500;
    transition: color 0.3s ease;
  }

  .breadcrumb a:hover {
    color: #000000;
  }

  .breadcrumb span {
    margin: 0 8px;
    color: #ffffff;
  };

/* Responsive Design */
@media (max-width: 768px) {
  .row {
    flex-direction: column;
  }

  .dashboard-menu {
    width: 35%; 
    height: 350px;
    margin-bottom: 20px;
  }

  .right {
    max-width: 100%;
  }

  .cart-item {
    flex-direction: column;
    align-items: flex-start;
  }

  .cart-item img {
    width: 100px;
  }

  .view-order {
    width: 100%;
    text-align: center;
  }

  .total-container {
  display: flex;
  justify-content: flex-end; 
  margin-top: 15px; 
  font-size: 18px;
  font-weight: bold;
}
}

.remove-item {
        background-color: #dc3545; /* Bootstrap danger color */
        color: white;
        border: none;
        padding: 6px 12px;
        font-size: 14px;
        border-radius: 5px;
        margin-left: auto;
        cursor: pointer;
        transition: background 0.3s ease-in-out;
        }

        .remove-item:hover {
            background-color: #c82333; /* Darker shade on hover */
        }


        /* Modal Background Overlay */
.modal-backdrop {
  background-color: rgba(0, 0, 0, 0.5);
}

/* Modal Content */
.modal-content {
  border-radius: 10px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
}

/* Modal Header */
.modal-header {
  background-color: #f8d7da;
  color: #721c24;
  border-bottom: 2px solid #f5c6cb;
}

/* Close Button */
.btn-close {
  background: none;
  border: none;
}

/* Modal Body */
.modal-body {
  padding: 20px;
}

/* Input Field */
.form-control {
  border-radius: 5px;
  border: 1px solid #ced4da;
  padding: 10px;
  font-size: 14px;
}

/* Submit Button */
.btn-danger {
  background-color: #dc3545;
  border: none;
  padding: 10px;
  font-size: 16px;
  border-radius: 5px;
  transition: 0.3s ease-in-out;
}

.btn-danger:hover {
  background-color: #c82333;
}

/* Responsive Styling */
@media (max-width: 576px) {
  .modal-dialog {
    max-width: 90%;
  }
}

/* Cart Item Status - Centered & Styled */
.cart-item-status {
    display: flex;
  margin-top: 20px;
    align-items: left;
    justify-content: center;
    min-width: 120px;
    height: 35px;
    color: #333;
    font-weight: bold;
    border-radius: 5px;
    text-transform: capitalize;
}

/* Optional - Add color coding based on status */
.cart-item-status.pending {
    background-color: #fff3cd;
    color: #856404;
}
.cart-item-status.delivered {
    background-color: #d4edda;
    color: #155724;
}
.cart-item-status.cancelled {
    background-color: #f8d7da;
    color: #721c24;
}
.cart-item-status.returned {
    background-color: #cce5ff;
    color: #004085;
}

/* Cancel Product Button */
.cancel-product-btn {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 6px 12px;
    font-weight: bold;
    border-radius: 5px;
    transition: background-color 0.2s ease;
    cursor: pointer;
}

.cancel-product-btn:hover {
    background-color: #c82333;
}

/* Return Product Button */
.return-product-btn {
    background-color: #ffc107;
    color: black;
    border: none;
    padding: 6px 12px;
    font-weight: bold;
    border-radius: 5px;
    transition: background-color 0.2s ease;
    cursor: pointer;
}

.return-product-btn:hover {
    background-color: #e0a800;
}


</style>

<main class="main">

  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li>
            <a href="/">Home</a> > 
            <a href="/userProfile">User Profile</a>>
            <a href="/orders">Orders</a>>
            <a href="">Order details</a>
        </li>
    </ol>
  </nav>
  

  <!-- Order Items Section -->
  <section class="pt-10 pb-10">
    <div class="d-flex justify-content-end" style="margin-right: 200px;">
      <a href="/generate-invoice/<%= order._id %>" class="btn btn-primary">Download Invoice</a>
   </div>
      <div class="container">
      <div class="row">
        <div class="right">
          <div class="card-header">
              <h5 class="mb-0">Order Items</h5>
          </div>
      
          <% if (products && products.length > 0) { %>
              <% for (let i = 0; i < products.length; i++) { %>
                  <div class="cart-item d-flex align-items-center justify-content-between p-3 border-bottom" id="order-item-<%= i %>">
                      
                      <!-- Product Image -->
                      <img src="/uploads/resized-images/<%= products[i].productImage[0] %>" 
                           alt="Product Image" class="cart-item-image" style="width: 120px; height: auto; border-radius: 5px;">
          
                      <!-- Product Details on the left -->
                      <div class="d-flex flex-column" style="flex: 1; margin-left: 20px;">
                          <h6 style="font-weight: bold; margin: 0;"><%= products[i].productName %></h6>
                          <p class="cart-item-price mb-0 text-muted">Price: ₹<span><%= products[i].price %></span></p>
                          <p class="cart-item-quantity">Quantity: <%= products[i].quantity %></p>
                          <p class="cart-item-price"><strong>Price:</strong> ₹<%= products[i].total %></p>
                      </div>

                      <% 
                      function formatStatus(status) {
                          switch(status) {
                              case "ordered": return "Ordered";
                              case "cancelled": return "Cancelled";
                              case "returned": return "Returned";
                              case "delivered": return "Delivered";
                              case "returnRequested": return "Return Requested";
                              case "returnRejected": return "Return Rejected";
                              default: return status; 
                          }
                      }
                  %>
                  <p class="cart-item-status"><%= formatStatus(products[i].itemStatus) %></p>

                      <% if (products[i].itemStatus === "ordered") { %>
                        <button class="btn btn-danger btn-sm cancel-product-btn" 
                                onclick="cancelProduct('<%= order.orderId %>', '<%= products[i].productId %>')">
                            Cancel Product
                        </button>
                    <% } else if (products[i].itemStatus === "delivered") { %>
                        <button class="btn btn-warning btn-sm return-product-btn" 
                                onclick="openReturnProductModal('<%= order.orderId %>', '<%= products[i].productId %>')">
                            Return Product
                        </button>
                    <% } %>
                  </div>
              <% } %>
          <% } else { %>
              <div class="empty-cart text-center">
                  <h5>No order details</h5>
                  <p>Browse our products and place an order.</p>
              </div>
          <% } %>

          <!-- Coupon Applied -->
          <% if (order.couponCode) { %>
            <div class="coupon-container mt-3 p-2 border rounded">
              <p class="text-success"><strong>Coupon Applied:</strong> <%= order.couponCode %> (₹<%= order.discount %> Off)</p>
            </div>
          <% } %>

          <!-- Total Amount & Cancel Order Button -->
          <div class="d-flex justify-content-between align-items-center mt-3">
           <div class="order-summary">
              <p style="color: red;" class="discount"><strong>Total Discount:</strong> ₹<%= order.discount %></p>
              <p style="color: green;" class="final-amount"><strong>Final Amount:</strong> ₹<%= order.finalAmount %></p>
          </div>



          <% if (order.paymentStatus === "failed") { %>
            <button class="btn btn-sm btn-primary" onclick="retryPayment('<%= order._id %>')">
                Retry Payment
            </button>
        <% } %>
        </div>  
      </div>
    </div>
  </section>

  <!-- Delivery Address Section -->
  <section class="pt-10 pb-10">
    <div class="container">
      <div class="row">
        <div class="right">
          <div class="card-header">
            <h5 class="mb-0">Delivery Address</h5>
          </div>
          <div class="cart-item">
            <p class="order-id"><strong>Name: </strong><%= address.name %></p>
            <p class="order-id"><strong>Phone: </strong><%= address.phone %></p>
            <p class="order-id"><strong>Type: </strong><%= address.addressType %></p>
            <div style="width: 200px;">
              <p><%= address.city %>, <%= address.landMark %>, <%= address.state %>, <%= address.pincode %></p>
            </div> 
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Order Details Section -->
  <section class="pt-10 pb-10">
    <div class="container">
      <div class="row">
        <div class="right">
          <div class="card-header">
            <h5 class="mb-0">Order Details</h5>
          </div>
          <div class="cart-item">
            <p class="order-id"><strong>Order ID: </strong><%= order._id.toString() %></p>
            <p class="order-id"><strong>Date: </strong><%= new Date(order.invoiceDate).toLocaleString('en-IN', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric', 
              hour: '2-digit', 
              minute: '2-digit', 
              second: '2-digit' 
            }) %></p>               
            <p class="order-id"><strong>Status: </strong><%= order.status %></p>
            <p class="order-id"><strong>Payment Method: </strong><%= order.payment_method %></p>
          </div>
        </div>
      </div>
    </div>
    
  </section>

</main>




<!-- Return Order Modal -->
<div class="modal fade" id="returnOrderModal" tabindex="-1" aria-labelledby="returnOrderModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="returnOrderModalLabel">Return Order</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="returnOrderForm">
          <div class="mb-3">
            <label for="returnReason" class="form-label">Reason for Return</label>
            <p id="returnReasonError" style="color: red; font-size: 14px;"></p>
            <textarea class="form-control" id="returnReason" rows="3" placeholder="Enter your reason" ></textarea>
          </div>
          <input type="hidden" id="returnOrderId">
          <button type="submit" class="btn btn-danger w-100">Submit Return Request</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Return Product Modal -->
<div class="modal fade" id="returnProductModal" tabindex="-1" aria-labelledby="returnProductModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="returnProductModalLabel">Return Product</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="returnProductForm">
          <div class="mb-3">
            <label for="productReturnReason" class="form-label">Reason for Returning Product</label>
            <p id="productReturnReasonError" style="color: red; font-size: 14px;"></p>
            <textarea class="form-control" id="productReturnReason" rows="3" placeholder="Enter your reason"></textarea>
          </div>
          <!-- These hidden inputs will carry order and product information -->
          <input type="hidden" id="returnProductOrderId">
          <input type="hidden" id="returnProductId">
          <button type="submit" class="btn btn-danger w-100">Submit Product Return Request</button>
        </form>
      </div>
    </div>
  </div>
</div>






<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>

//SINGLE PRODUCT CANCEL

async function cancelProduct(orderId, productId) {
    try {
      console.log(orderId,'hello',productId)
        const result = await Swal.fire({
            title: "Are you sure?",
            text: "Do you really want to cancel this product from your order?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, cancel it",
            cancelButtonText: "No"
        });

        if (result.isConfirmed) {
            const response = await fetch(`/cancelProduct`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ orderId, productId })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Product Cancelled',
                    text: data.message || 'Product has been successfully cancelled.'
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Cancellation Failed',
                    text: data.message || 'Unable to cancel the product. Please try again.'
                });
            }
        }

    } catch (error) {
        console.error('Error cancelling product:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops!',
            text: 'Something went wrong. Please try again later.'
        });
    }
}


//SINGLE PRODUCT RETURN

function openReturnProductModal(orderId, productId) {

  document.getElementById("returnProductOrderId").value = orderId;
  document.getElementById("returnProductId").value = productId;

  document.getElementById("productReturnReason").value = "";
  document.getElementById("productReturnReasonError").textContent = "";

  const returnProductModal = new bootstrap.Modal(document.getElementById("returnProductModal"));
  returnProductModal.show();

  document.getElementById("returnProductModal").addEventListener("hidden.bs.modal", function () {
    document.getElementById("productReturnReasonError").textContent = "";
  });
}

document.getElementById("productReturnReason").addEventListener("input", function () {
  document.getElementById("productReturnReasonError").textContent = "";
});

document.getElementById("returnProductForm").addEventListener("submit", async function (event) {
  event.preventDefault();

  const orderId = document.getElementById("returnProductOrderId").value;
  const productId = document.getElementById("returnProductId").value;
  const reason = document.getElementById("productReturnReason").value.trim();
  const errorMessage = document.getElementById("productReturnReasonError");

  if (!reason) {
    errorMessage.textContent = "Please provide a reason for returning this product.";
    return;
  } else if (reason.length < 10) {
    errorMessage.textContent = "Reason must be at least 10 characters long.";
    return;
  }

  Swal.fire({
    title: "Are you sure?",
    text: "Do you really want to submit this return request?",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, submit it!"
  }).then(async (result) => {
    if (result.isConfirmed) {
      try {
        const response = await fetch('/productReturn', {  
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId, productId, reason })
        });

        const result = await response.json();
        if (response.ok) {
          Swal.fire({
            title: "Request Submitted!",
            text: result.message || "Your return request has been submitted successfully.",
            icon: "success",
            confirmButtonText: "OK"
          }).then(() => {
            location.reload();  
          });
        } else {
          Swal.fire({
            title: "Error!",
            text: result.message || "Failed to submit return request.",
            icon: "error",
            confirmButtonText: "OK"
          });
        }
      } catch (error) {
        console.error("Error submitting return request:", error);
        Swal.fire({
          title: "Error!",
          text: "Something went wrong. Please try again.",
          icon: "error",
          confirmButtonText: "OK"
        });
      }
    }
  });
});




//WHOLE ORDER CANCEL and RETURN

  async function cancelOrder(orderId){

    console.log(orderId)

    try {
      const result = await Swal.fire({
            title: "Are you sure?",
            text: "Do you really want to cancel this order?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, cancel it",
            cancelButtonText: "Cancel"
        });

        if(result.isConfirmed){
        
          $.ajax({
            type:'POST',
            url: '/cancel-order', 
            dataType:'json',
            contentType: "application/json",
            data: JSON.stringify({orderId:orderId}),
              success:function(response){
                if(response.success){
                    Swal.fire({
                    icon:'success',
                    title:'Success',
                    text: response.message,
                    showConfirmButton:false,
                    timer:1500
                })
                setTimeout(()=>{
                window.location.replace('/orders')
                },2000)
                }
            else{
                    Swal.fire({
                    icon:'error',
                    title:'Error',
                    text:response.message
                })
            }
            },
            error:function(){
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again.'
                });
                }   


            })

        }

    } catch (error) {
      Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Something went wrong. Please try again.'
        });
    }
  }



  function openReturnModal(orderId) {
  document.getElementById("returnOrderId").value = orderId;
  document.getElementById("returnReason").value = ""; // Clear previous input
  document.getElementById("returnReasonError").textContent = ""; // Clear previous error message

  var returnModal = new bootstrap.Modal(document.getElementById("returnOrderModal"));
  returnModal.show();

  // Clear error message when modal closes
  document.getElementById("returnOrderModal").addEventListener("hidden.bs.modal", function () {
    document.getElementById("returnReasonError").textContent = "";
  });
}

// Listen for user input to remove error message when they start typing
document.getElementById("returnReason").addEventListener("input", function () {
  document.getElementById("returnReasonError").textContent = "";
});

document.getElementById("returnOrderForm").addEventListener("submit", async function (event) {
  event.preventDefault();

  const orderId = document.getElementById("returnOrderId").value;
  const reason = document.getElementById("returnReason").value.trim();
  const errorMessage = document.getElementById("returnReasonError");

  if (!reason) {
    errorMessage.textContent = "Please provide a reason for the return.";
    return;
  } else if (reason.length < 10) {
    errorMessage.textContent = "Reason must be at least 10 characters long.";
    return;
  }

  Swal.fire({
    title: "Are you sure?",
    text: "Do you really want to submit this request?",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, return it!"
  }).then(async (result) => {
    if (result.isConfirmed) {
      try {
        const response = await fetch('/orderReturn', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId, reason })
        });

        const result = await response.json();
        if (response.ok) {
          Swal.fire({
            title: "Request Submitted!",
            text: result.message,
            icon: "success",
            confirmButtonText: "OK"
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: "Error!",
            text: result.message,
            icon: "error",
            confirmButtonText: "OK"
          });
        }
      } catch (error) {
        console.error("Error submitting return request:", error);
        Swal.fire({
          title: "Error!",
          text: "Something went wrong. Please try again.",
          icon: "error",
          confirmButtonText: "OK"
        });
      }
    }
  });
});




async function retryPayment(orderId) {
    try {
        const response = await fetch('/retry-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId }),
        });

        const data = await response.json();

        if (data.success && data.orderId) {
            const options = {
                key: data.key_id,
                amount: data.amount,
                currency: data.currency,
                order_id: data.razorpay_order_id, 
                name: "Filimatic",
                description: "Retry Payment",
                handler: async function (response) {
                    try {
                        const verifyResponse = await fetch('/verify-retrypayment', {   
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                orderId: data.orderId,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature
                            }),
                        });

                        const verifyData = await verifyResponse.json();

                        if (verifyData.success) {
                            Swal.fire({
                                title: "Payment Successful!",
                                text: "Your payment has been processed successfully.",
                                icon: "success",
                                confirmButtonText: "OK",
                            }).then(() => {
                                window.location.replace('/orders');
                            });
                        } else {
                            Swal.fire({
                                title: "Payment Verification Failed",
                                text: "Something went wrong during verification.",
                                icon: "error",
                                confirmButtonText: "Try Again",
                            });
                        }
                    } catch (err) {
                        console.error("Payment verification error:", err);
                        Swal.fire({
                            title: "Verification Error",
                            text: "Something went wrong. Please try again.",
                            icon: "error",
                            confirmButtonText: "OK",
                        });
                    }
                },
                prefill: { email: data.email },
                theme: { color: "#3399cc" },
            };

            const rzp = new Razorpay(options);
            rzp.on("payment.failed", function (response) {
                Swal.fire({
                    title: "Payment Failed",
                    text: "Your payment failed.Please try again.",
                    icon: "error",
                    confirmButtonText: "Retry",
                });
            });

            rzp.open();
        } else {
            Swal.fire({
                title: "Retry Payment Failed",
                text: "Something went wrong while processing the retry payment.",
                icon: "error",
                confirmButtonText: "Try Again",
            });
        }
    } catch (error) {
        console.error("Error retrying payment:", error);
        Swal.fire({
            title: "Error!",
            text: "Something went wrong. Please try again.",
            icon: "error",
            confirmButtonText: "OK",
        });
    }
}


</script>

<%- include("../../views/partials/user/footer") %>